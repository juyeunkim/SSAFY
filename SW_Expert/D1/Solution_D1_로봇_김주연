import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Solution_D1_로봇_김주연 {
	
	public static void main(String[] args) throws FileNotFoundException {
		
		/**
		 * 강사님 풀이 - A,B,C를 모두 담을수있도록
		 * <삼차원배열>을 이용하여 탐색
		 * 
		 * 
		 * 배열의 인덱스는 - char type = 'A'
		 * 				type - 'A' => 인덱스 0 번째 접근
		 * 
		 * 배열에서 로봇을 만나면, 벽또는 다른 로봇을 만나기 전까지 이동
		 * */
		// TODO Auto-generated method stub
		System.setIn(new FileInputStream("input.txt"));
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		
		for(int t=1; t<=T; t++) {
			int result = 0;
			
			int N = sc.nextInt();
			sc.nextLine();
			char[][] map = new char[N][N];
			
			
			// S 는 공백, W 는 벽, ABC로봇
			// A 는 오른쪽
			// B 는 좌우
			// C는 상하좌우
			
			for(int i=0; i<N;i++) {
				/**
				 * map[i][j] = sc.next().charAt(0);
				 * */
				String s = sc.nextLine();
				s = s.replace(" ","");
				for(int j=0; j<s.length();j++) {
					map[i][j] = s.charAt(j);
				}
			}
			/**
			 * for(int i=0; i<N;i++) {
				for(int j=0; j<N;j++) {
					int robot = map[i][j] -'A';
					if(robot>2) continue;
					
					for(int d =0; d<direction[robot].length; d++){
						newI = i; newJ = j;
						while(true){
							newI += direction[robot][d][0];
							newJ += direction[robot][d][1];
							
							if(newI <0 || newJ <0 || newI>=N || newJ >=N) break;
							
							if(map[newI][newJ]=='S') ans ++;
							else break;
						}
					}
				}
			}
			 * */
			for(int i=0; i<N;i++) {
				for(int j=0; j<N;j++) {
					// 오른쪽 이동
					if(map[i][j]== 'A' || map[i][j]=='B' || map[i][j]=='C') {
						for(int y = j+1; y<N; y++) {
							if(map[i][y]!='S') break;
							
							result++;
						}

					}		
					
					// 왼쪽 이동
					if(map[i][j]=='B' || map[i][j] =='C') {
						for(int y=j-1; y>=0; y--) {
							if(map[i][y]!='S') break;
							
							result++;
						}

					}
					
					// 상, 하 이동
					if(map[i][j] == 'C') {
						for(int x = i-1; x>=0; x--) {
							if(map[x][j]!='S') break;
							
							result++;
						}
						
						for(int x = i+1; x<N; x++) {
							if(map[x][j]!='S') break;
							
							result++;
						}

					}
				}
			}
			
			System.out.println("#"+t+" "+result);
		}
		
	}

}
